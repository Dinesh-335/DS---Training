#include <stdio.h>
#include <stdlib.h>
#define MAX 5 
struct Stack {
    int arr[MAX];
    int top;
};
void initStack(struct Stack* stack) {
    stack->top = -1;  
}
int isFull(struct Stack* stack) {
    return stack->top == MAX - 1;
}
int isEmpty(struct Stack* stack) {
    return stack->top == -1;
}
void push(struct Stack* stack, int value) {
    if (isFull(stack)) {
        printf("Stack Overflow: Cannot push %d. The stack is full.\n", value);
    } else {
        stack->arr[++(stack->top)] = value;
        printf("%d pushed to stack.\n", value);
    }
}
int pop(struct Stack* stack) {
    if (isEmpty(stack)) {
        printf("Stack Underflow: Cannot pop. The stack is empty.\n");
        return -1; 
    } else {
        int value = stack->arr[(stack->top)--];
        return value;
    }
}
int peek(struct Stack* stack) {
    if (isEmpty(stack)) {
        printf("Stack is empty.\n");
        return -1;
    } else {
        return stack->arr[stack->top];
    }
}
void display(struct Stack* stack) {
    if (isEmpty(stack)) {
        printf("Stack is empty.\n");
    } else {
        printf("Stack elements: ");
        for (int i = 0; i <= stack->top; i++) {
            printf("%d ", stack->arr[i]);
        }
        printf("\n");
    }
}
int main() {
    struct Stack stack;
    initStack(&stack);
    push(&stack, 10);
    push(&stack, 20);
    push(&stack, 30);
    push(&stack, 40);
    push(&stack, 50);
    push(&stack, 60);
    display(&stack);
    printf("Top element is %d\n", peek(&stack));
    printf("Popped element: %d\n", pop(&stack));
    printf("Popped element: %d\n", pop(&stack));
    display(&stack);
    push(&stack, 60);
    display(&stack);
    return 0;
}
